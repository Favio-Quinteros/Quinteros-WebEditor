/**
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.xtext.asmetal.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.asmetal.asmetaL.Asm;
import org.xtext.asmetal.asmetaL.Body;
import org.xtext.asmetal.asmetaL.ExportClause;
import org.xtext.asmetal.asmetaL.Header;
import org.xtext.asmetal.asmetaL.ImportClause;
import org.xtext.asmetal.asmetaL.Initialization;
import org.xtext.asmetal.asmetaL.MacroDeclaration;
import org.xtext.asmetal.asmetaL.Signature;
import org.xtext.asmetal.services.AsmetaLGrammarAccess;

@SuppressWarnings("all")
public class AsmetaLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private AsmetaLGrammarAccess _asmetaLGrammarAccess;
  
  protected void _format(final Asm asm, @Extension final IFormattableDocument document) {
    document.<Header>format(asm.getHeaderSection());
    document.<Body>format(asm.getBodySection());
    document.<MacroDeclaration>format(asm.getMainrule());
    EList<Initialization> _initialState = asm.getInitialState();
    for (final Initialization initialization : _initialState) {
      document.<Initialization>format(initialization);
    }
    document.<Initialization>format(asm.getDefaultInitialState());
  }
  
  protected void _format(final Header header, @Extension final IFormattableDocument document) {
    EList<ImportClause> _importClause = header.getImportClause();
    for (final ImportClause importClause : _importClause) {
      document.<ImportClause>format(importClause);
    }
    document.<ExportClause>format(header.getExportClause());
    document.<Signature>format(header.getSignature());
  }
  
  public void format(final Object asm, final IFormattableDocument document) {
    if (asm instanceof XtextResource) {
      _format((XtextResource)asm, document);
      return;
    } else if (asm instanceof Asm) {
      _format((Asm)asm, document);
      return;
    } else if (asm instanceof Header) {
      _format((Header)asm, document);
      return;
    } else if (asm instanceof EObject) {
      _format((EObject)asm, document);
      return;
    } else if (asm == null) {
      _format((Void)null, document);
      return;
    } else if (asm != null) {
      _format(asm, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(asm, document).toString());
    }
  }
}
